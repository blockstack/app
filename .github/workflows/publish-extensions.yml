name: Publish Extensions
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  pre_run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@ad6cb1b847ffb509a69b745b6ee2f1d14dfe14b8
        with:
          access_token: ${{ github.token }}

  publish_chrome_extension:
    name: Publish Chrome extension
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'Version Packages')"
    needs:
      - pre_run
    outputs:
      publish_status: ${{ steps.publish-chrome.outputs.publish_status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Node Version
        uses: actions/setup-node@v2-beta
        with:
          node-version: 12.21.0
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install yarn dependencies
        run: yarn --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Build extension
        run: sh build-ext.sh

      - name: Sign and Upload Production Chrome extension
        continue-on-error: true
        id: publish-chrome
        run: |
          yarn webstore upload --source stacks-wallet-chromium.zip --auto-publish
          echo "::set-output name=publish_status::${?}"
        env:
          EXTENSION_ID: ${{ secrets.CHROME_APP_ID }}
          CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}

  publish_firefox_extension:
    name: Publish Firefox extension
    runs-on: ubuntu-latest
    env:
      MINIFY_PRODUCTION_BUILD: true
    if: "contains(github.event.head_commit.message, 'Version Packages')"
    needs:
      - pre_run
    outputs:
      publish_status: ${{ steps.publish-firefox.outputs.publish_status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Node Version
        uses: actions/setup-node@v2-beta
        with:
          node-version: 12.21.0
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install yarn dependencies
        run: yarn --frozen-lockfile

      - name: Build project
        run: yarn build

      - name: Build extension
        run: sh build-ext.sh

      - name: Sign and Upload Production Firefox extension
        continue-on-error: true
        id: publish-firefox
        run: |
          yarn web-ext-submit --channel=listed
          echo "::set-output name=publish_status::${?}"
        env:
          WEB_EXT_API_KEY: ${{ secrets.FIREFOX_API_KEY }}
          WEB_EXT_API_SECRET: ${{ secrets.FIREFOX_API_SECRET }}

      - name: Create Issue for Firefox Manual Step 
        id: create-firefox-issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/FIREFOX_ISSUE_TEMPLATE.md
          update_existing: true

      - name: Add Issue to Backlog
        uses: peter-evans/create-or-update-project-card@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          project-location: hirosystems
          project-name: UserX Kanban
          column-name: ðŸ“¥ Backlog
          issue-number: ${{ steps.create-firefox-issue.outputs.number }}

      - name: Firefox Issue Status
        run: |
          echo "Created issue number: ${{ steps.create-firefox-issue.outputs.number }}"
          echo "Created: ${{ steps.create-firefox-issue.outputs.url }}"

  post_run:
    runs-on: ubuntu-latest
    needs:
      - publish_chrome_extension
      - publish_firefox_extension
    steps:
      - name: Publish Statuses
        run: |
          echo "::warning::Firefox Publish Status: $([[ ${{ needs.publish_firefox_extension.outputs.publish_status }} = 0 ]] && echo 'SUCCESS' || echo 'FAILED')"
          echo "::warning::Chrome Publish Status: $([[ ${{ needs.publish_chrome_extension.outputs.publish_status }} = 0 ]] && echo 'SUCCESS' || echo 'FAILED')"
